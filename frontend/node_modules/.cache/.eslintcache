[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/compoments/Adding.js":"4","/app/src/compoments/Contacts.js":"5","/app/src/compoments/Phones.js":"6"},{"size":535,"mtime":1695349599499,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1695349599499,"results":"9","hashOfConfig":"8"},{"size":743,"mtime":1697538255397,"results":"10","hashOfConfig":"8"},{"size":2426,"mtime":1697536913507,"results":"11","hashOfConfig":"8"},{"size":2040,"mtime":1697539678479,"results":"12","hashOfConfig":"8"},{"size":2952,"mtime":1697540441349,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oq2qj1",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",[],[],"/app/src/reportWebVitals.js",[],[],"/app/src/App.js",[],[],"/app/src/compoments/Adding.js",[],[],"/app/src/compoments/Contacts.js",["34","35","36"],[],"import React, { useState, useEffect } from 'react';\nimport Phones from './Phones';\n\nfunction Contacts(props) {\n  \n  const [phones, setPhones] = useState([]);\n  const [newName, setNewName] = useState('');\n\n  const handleAddContact = () => {\n    \n    //call apis\n    fetch('http://localhost/api/contacts', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({name: newName})\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t  props.setContacts(contacts => [...contacts, data]);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t  console.error('Error:', error);\n\t\t\t});\n    setNewName('');\n  };\n\n  function handleInputChange(event) {\n    setNewName(event.target.value);\n  };\n\n  function deleteContact(id) {\n    fetch(`http://localhost/api/contacts/${id}`, {\n      method: 'DELETE',\n    })\n      .then(() => {\n        props.setContacts(contacts => contacts.filter(contact => contact.id !== id));\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  };\n\n  return (\n    <div>\n      <div style={{ borderBottom: 'solid white', padding: '10px', backgroundColor: '#7D7C7C' }}>\n        <h2>{props.heading}</h2>\n        <input type=\"text\" \n               placeholder=\"Name\" \n               value = {newName}\n               onChange={handleInputChange}\n               \n        />\n        <br /><br />\n        <button\n          className=\"button1\"\n          onClick={handleAddContact}\n        >\n          <p>Create Contact</p>\n        </button>\n      </div>\n      \n      {props.contacts.map((contact) => (\n  \t\t<div key={`contact_${contact.id}`} className='CreateContact'>\n    \t\t<Phones setContacts={props.setContacts} contactId={contact.id} name={contact.name} />\n    \t\t<button\n     \t\t\tclassName=\"button2\"\n     \t\t\tstyle={{ width: \"30%\" }}\n      \t\t\tonClick={() => {\n        \t\t\t\t\t\tconsole.log('Contact ID:', contact.id);\n        \t\t\t\t\t\tdeleteContact(contact.id);\n      \t\t\t}}\n    >\n      Delete Contact\n    </button>\n  </div>\n))}\n    </div>\n  );\n}\n\nexport default Contacts;\n",[],"/app/src/compoments/Phones.js",[],[],{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"41","line":6,"column":10,"nodeType":"39","messageId":"40","endLine":6,"endColumn":16},{"ruleId":"37","severity":1,"message":"42","line":6,"column":18,"nodeType":"39","messageId":"40","endLine":6,"endColumn":27},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'phones' is assigned a value but never used.","'setPhones' is assigned a value but never used."]